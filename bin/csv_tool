#!/usr/bin/env ruby
require "rubygems" # ruby1.9 doesn't "require" it though
require "thor"

require 'pry'

require 'csv_tool'

class CSVTool < Thor
  desc "check_parse FILE", "Parses the csv to and returns basic facts"
  def check_parse(csv_file)
    if File.exists?(File.expand_path(csv_file))
      headers = nil
      row_count = max_row_width =  0
      CSV.foreach(csv_file) do |line|
        headers ||= line
        row_count += 1
        max_row_width = line.length if line.length > max_row_width
      end
      puts "Headers: #{headers}"
      puts "Row count: #{row_count}"
      puts "Header width: #{headers.length}"
      puts "Longest width: #{max_row_width}"
    else
      fail Thor::Error, 'File not found'
    end
  end

  desc "make_detroit_square INFILE OUTFILE", "Tries to normalize detroit's unescaped transactions"
  def make_detroit_square(infile, outfile)
    if File.exists?(File.expand_path(infile))
      checker = CsvTool::DetroitCsvCleaner.new
      CSV.open(outfile, 'wb') do |csv|
        CSV.foreach(infile) do |line|
          csv << checker.check_line!(line)
        end
      end
    else
      fail Thor::Error, 'File not found'
    end
  end

  desc "fix_mac_line_endings INFILE OUTFILE", "Re-encodes the strings in the file to from windows to unicode"
  def fix_mac_line_endings(infile, outfile)
    s = File.read(infile)
    s.gsub!("\r", "\n")
    File.open(outfile, 'wb') do |f|
      f.write(s)
    end
  end

  desc "split_csv_file INFILE OUTFILE", "splits a large csv file with headers across multiple files. The outfile argument is used as a base name for the output files"
  def split_csv_file(infile, outfile_base)
    s = CsvTool::FileManipulation::CsvSplitter.new(infile, outfile_base)
    s.split
  end

  desc "merge_csv_files INFILES", "Merges multiple CSV files into one large CSV file"
  option :outfile, required: true
  def merge_csv_files(*infiles)
    j = CsvTool::FileManipulation::CsvJoiner.new(infiles, options[:outfile])
    j.join!
  end
end

CSVTool.start
